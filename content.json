{"meta":{"title":"lightXXu","subtitle":null,"description":null,"author":"lightXXu","url":"http://yoursite.com"},"pages":[{"title":"标签","date":"2018-07-01T05:34:49.000Z","updated":"2018-07-01T05:43:19.000Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"log4j2简单使用","slug":"log4j2简单使用","date":"2018-08-09T14:26:22.000Z","updated":"2018-08-09T14:28:13.000Z","comments":true,"path":"2018/08/09/log4j2简单使用/","link":"","permalink":"http://yoursite.com/2018/08/09/log4j2简单使用/","excerpt":"目前工作中使用到了 log4j2 的相关配置，做如下记录，以便日后翻阅","text":"目前工作中使用到了 log4j2 的相关配置，做如下记录，以便日后翻阅 日志级别trace：追踪，一般不用 debug：调试用，一般开发，测试过程中使用 debug 日志，debug 日志在正式生产环境中会被关闭，降低性能消耗 info：输出相对重要的信息 warn：警告信息，不一定是错误信息，有些可以不用管 error：错误信息，一般是提示程序运行过程中的异常 fatal：致命错误 输出源CONSOLE (输出到控制台)、FILE (输出到文件) 布局方式SimpleLayout：以简单的形式显示 HTMLLayout：以 HTML 表格显示 PatternLayout：自定义形式显示，一般采用此种方法 自定义格式%t：线程名称 %p：日志级别 %c：日志消息所在类名 %m：消息内容 %M：输出执行方法 %d：时间，%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2018-08-09 16:18:07,659 %x：输出和当前线程相关联的NDC（嵌套诊断环境） %L：代码中的行数 %n：换行 示例： 配置使用配置文件命名与存储位置系统选择configuration文件的优先级如下（放在src文件夹）： classpath下名为 log4j-test.json 或者 log4j-test.jsn 文件 classpath下名为 log4j2-test.xml classpath下名为 log4j.json 或者log4j.jsn文件 classpath下名为 log4j2.xml 下述例子以 log4j2.xml 为例： java 项目中 classpath 一般指 classes（或者bin) 目录和 lib，lib 优先级要高于 classes； 示例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;configuration status=\"error\"&gt; &lt;!-- 先定义所有的appender --&gt; &lt;appenders&gt; &lt;!-- 这个输出控制台的配置 --&gt; &lt;Console name=\"Console\" target=\"SYSTEM_OUT\"&gt; &lt;!-- 控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） --&gt; &lt;ThresholdFilter level=\"trace\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/&gt; &lt;!-- 日志输出格式 --&gt; &lt;PatternLayout pattern=\"%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n\"/&gt; &lt;/Console&gt; &lt;!-- 文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定 --&gt; &lt;!-- append为TRUE表示消息增加到指定文件中，false表示消息覆盖指定的文件内容，默认值是true --&gt; &lt;File name=\"log\" fileName=\"log/test.log\" append=\"false\"&gt; &lt;PatternLayout pattern=\"%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n\"/&gt; &lt;/File&gt; &lt;!-- 添加过滤器ThresholdFilter,可以有选择的输出某个级别以上的类别 onMatch=\"ACCEPT\" onMismatch=\"DENY\"意思是匹配就接受,否则直接拒绝 --&gt; &lt;File name=\"ERROR\" fileName=\"logs/error.log\"&gt; &lt;ThresholdFilter level=\"error\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/&gt; &lt;PatternLayout pattern=\"%d&#123;yyyy.MM.dd 'at' HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n\"/&gt; &lt;/File&gt; &lt;!-- 这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --&gt; &lt;RollingFile name=\"RollingFile\" fileName=\"logs/web.log\" filePattern=\"logs/$$&#123;date:yyyy-MM&#125;/web-%d&#123;MM-dd-yyyy&#125;-%i.log.gz\"&gt; &lt;PatternLayout pattern=\"%d&#123;yyyy-MM-dd 'at' HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n\"/&gt; &lt;SizeBasedTriggeringPolicy size=\"2MB\"/&gt; &lt;/RollingFile&gt; &lt;/appenders&gt; &lt;!-- 然后定义logger，只有定义了logger并引入的appender，appender才会生效 --&gt; &lt;loggers&gt; &lt;!-- 异步Logger 业务程序将日志信息放入 Disruptor 队列，程序响应速度更快，对 CPU 消耗更大 --&gt; &lt;!-- additivity=false时不会打印父logger --&gt; &lt;AsyncLogger name=\"sysLog\" level=\"DEBUG\" additivity=\"false\"&gt; &lt;AppenderRef ref=\"RollingFile\"/&gt; &lt;AppenderRef ref=\"log\"/&gt; &lt;/AsyncLogger&gt; &lt;!-- 默认logger --&gt; &lt;root level=\"trace\"&gt; &lt;appender-ref ref=\"RollingFile\"/&gt; &lt;appender-ref ref=\"Console\"/&gt; &lt;appender-ref ref=\"ERROR\" /&gt; &lt;appender-ref ref=\"log\"/&gt; &lt;/root&gt; &lt;/loggers&gt;&lt;/configuration&gt;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"centos安装python","slug":"centos安装python","date":"2018-08-03T14:49:23.000Z","updated":"2018-08-03T14:52:58.000Z","comments":true,"path":"2018/08/03/centos安装python/","link":"","permalink":"http://yoursite.com/2018/08/03/centos安装python/","excerpt":"学习一下 python,记录一次在 centos 虚拟机上的安装经历","text":"学习一下 python,记录一次在 centos 虚拟机上的安装经历 环境：centos7(Virtual Box) python版本：3.7 centos7 默认会自带 python2，首先查看一下 安装的 python 版本以及位置 1234# python -V# which python/usr/bin/python 进入 bin 目录，查看 python 文件 123456# cd /usr/bin# ls -al python* lrwxrwxrwx. 1 root root 7 Dec 20 2016 python -&gt; python2lrwxrwxrwx. 1 root root 9 Dec 20 2016 python2 -&gt; python2.7-rwxr-xr-x. 1 root root 7136 Nov 6 2016 python2.7 ls -al 参数表示显示所有隐藏文件和目录，并显示所有详细信息 从结果中看到，可执行文件 python 指向 python2 ,python2 又指向 python2.7 ，即 python 默认指向 python2.7 我们先备份 python2.7 123# mv python pyhton.bak# ls python2 python2.7 pyhton.bak 回到 src 目录，通过 wget 下载，外国服务器很慢，需耐心等待 123# cd /usr/local/src # wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz# tar -zxvf Python-3.7.0.tgz tar -zxvf 解压到当前目录 执行安装 123# cd Python-3.7.0# ./configure --prefix=/usr/local/python/python3# make &amp;&amp; make altinstall 执行 ./configure 可以创建一个文件 creating Makefile,下面的 make 命令需要用到，执行 make install 便可以安装到指定的目录 –prefix 参数 代表安装的路径，不配的话，可执行文件默认放置到 /usr/local/bin，库文件默认放到 /usr/local/lib，配置文件默认放在 /usr/local/etc ,其他的资源放在 /usr/local/share 安装到一起方便以后的移植和卸载 然后执行 make 、make install 命令，安装完成 我这里使用的是 make altinstall，防止 /usr/bin/目录中出现两个不同版本的 python 接下来需要将默认的共享库加载路径指向 libpython3.7.so所在的目录 123# vim /etc/ld.so.conf//在最后一行添加 \"/usr/local/python/python3/lib\"# ldconfig 将 python3.7 连接到 /usr/local/bin 1# ln -s /usr/local/python/python3/bin/python3.7 /usr/bin/python python3 到此已经安装完毕 可以确认安装结果 12# python -VPython 3.7.0 还有一件事，这个阶段 yum 一般会出问题 ，修改 /usr/bin/yum 以及 /usr/libexec/urlgrabber-ext-down 两个文件的头，将 #!/usr/bin/python 改成 #!/usr/bin/python2 此时 yum 恢复正常","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"centos","slug":"centos","permalink":"http://yoursite.com/tags/centos/"}]}]}